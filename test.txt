Задания 1 и 2 являются обязательными к выполнению. Задание 3 имеет два варианта (3.1. и 3.2.). Необходимо выбрать только один из них! Выполнение обоих вариантов оценивается дополнительно.  Задание 4* также является необязательным. Все результаты сохраните в одной папке на Google Drive, откройте её для чтения и прикрепите ссылку на папку в ответном письме.
1. Проектирование БД
Задача: Спроектировать структуру БД для ситуации: Есть пациенты со своими атрибутами (ФИО, дата рождения, телефон, номер мед карты), сотрудники со своими (ФИО, дата рождения, телефон, ИНН). В каком количестве таблиц можно сохранить подобную структуру, если любой пациент может являться сотрудником и наоборот. Предложить несколько вариантов, сравнить их по критериям (плюсы и минусы):
1. удобство использования
2. расширяемость
3. целостность относительно других таблиц (например, приемы, в примере ниже)
4. производительность
5. свои мысли

Таблицы:
Таблица пациентов (id пациента, ФИО, дата рождения, телефон, номер мед карты)
Таблица сотрудников (id сотрудника, ФИО, дата рождения, телефон, ИНН)
Таблица приёмов (id приёма, дата, foreing key id сотрудника, foreing key id пациента)
Таблица списка лекарств (id списка лекарств, foreing key пациента, foreing key id сотрудника, foreing key id приёма)
Плюс ещё таблицы, которые могут понадобится в процессе. Допустим, список санаториев и кого туда отправляли.

Легко писать запросы (Минус: придётся использовать joins)
Благодаря разделению легко определиться где сотрудник, а где пациент.

Ещё можно объеденить сотрудников и паиентов в таблицу лица, но тогда запросы придётся составлять ещё сложней. Допустим, проверять на наличие ИНН и увеличится время ответа на запрос, если строк с данными не 5, а 555 555 555.




2. SQL запросы
Таблица: receptions (ID int NOT NULL, ID_Patients int NOT NULL, ID_Doctors int NOT NULL, StartDateTime datetime NOT NULL)
1.       Определить сколько приемов (всех пациентов) было в КАЖДУЮ дату 2015 года (для вывода информации на график)
select StartDateTime, count(*) from receptions where year(datetime) = 2015 group by datetime

2.       Для каждого пациента выбрать врача из последнего приема (по дате). Предложить несколько вариантов решения и сравнить, в каких ситуациях возвращаемые данные будут различаться

with last_employee (
    select ID_Patients, max(datetime) as datetime from receptions group by ID_Patients
)

select l.datetime, r.ID_Patients, ID_Doctors from receptions as r join last_employee as l on l.ID_Patients = r.ID_Patients and l.datetime = r.datetime











3.1. Телеграм-бот
Написать телеграм-бота “Гороскоп” на Python, используя библиотеку aiogram, со следующим функционалом:
1. При регистрации бот предлагает пользователю выбрать свой знак зодиака. Используется ReplyKeyboardMarkup 3 ряда по 4 кнопки с эмоджи знака зодиака. После выбора знака бот присылает сообщение с информацией о выбранном знаке.
2. После регистрации бот присылает гороскоп на сегодня. Сообщение включает себя текст, картинку и InlineKeyboardMarkup с одной кнопкой “Обновить”. Текст включает в себя дату гороскопа, выделенную жирным шрифтом. При нажатии на кнопку сообщение должно обновиться, и прогноз должен измениться на другой.
3. Каждый день в 10 утра пользователь получает гороскоп на новый день (только в случае, если его еще нет).
4. В меню бота есть команда “/update”, которая обновляет прогноз на сегодня (аналогично кнопке “Обновить” в сообщении) либо отправляет новое сообщение с гороскопом, если сообщения за сегодня по какой-то причине нет.
5. Когда пользователь отправляет что-угодно в чат, бот пишет “Извините, я не понял”.
6. Добавить в меню бота команду “/change_zodiac”. При нажатии появляется клавиатура, как при регистрации, и знак зодиака пользователя меняется на выбранный. Приходит новый гороскоп на сегодня.
7. Добавить в меню бота команду “/clear_history”, которая очищает историю сообщений, оставляя только сообщение с последним выбранным знаком зодиака.
Разворачивать бота на сервере не нужно, достаточно прислать код с локальным запуском.


























3.2. Web-приложение
Имеющиеся данные:  информация о приёмах пациентов и самих пациентах, информация об авторизации на сайте в незашифрованном виде. Приёмы включают в себя будущие приёмы, завершенные приёмы, отменённые приёмы.


Подготовка данных:
1. Считайте данные из файла receptions.xlsx и заполните ими DataFrame. 
2. Задайте типы столбцов (str, int или datetime). Каждый тип должен быть применён как минимум 1 раз.
3. Удалите столбцы со всеми комментариями.
4. Замените отсутствующие значения на пустоты.
5. Добавьте столбец, считающий для будущих приёмов количество дней до приёма, а для завершенных приёмов – количество дней, прошедших после приёма.


Веб-сайт:
1. Веб-сайт можно развернуть локально. Веб-сайт должен состоять из двух страниц:  страница аутентификации и страница с информацией о приёмах, доступная только для зарегистрированных пользователей.
2. Страница аутентификации. Осуществите аутентификацию пользователя используя файл auth.xlsx. Незарегистрированным пользователям отобразите всплывающее окно с ошибкой авторизации.
3. Страница отображения информации о приёмах. 
После авторизации перенаправьте пользователя на страницу с данными о его приёмах. Соответствие устанавливается по введенному номеру телефона (логин). Для отображения использовать шаблон template.html. В список клиник попадают все клиники, в которых пациент уже был, или куда записан в будущем. Если у пациента нет завершенных или будущих приёмов, то нужно убрать отсутствующий блок. 
4. Необходимо вести логирование всех попыток аутентификаций (успешных и неуспешных).
________________
4*. Статичный QR код с изменяемой ссылкой
Написать web-страницу со следующим функционалом:
1. Страница включает в себя поле ввода ссылки, кнопку “Обновить ссылку”, текущую ссылку и QR код. Пример:
  

2. QR код статичный, не меняется в процессе.
3. В поле ввода пользователь вводит ссылку, которую хочет увидеть при сканировании QR кода. Чтобы перенастроить QR код на новую ссылку пользователь нажимает на кнопку обновления.
4. В поле с текущей ссылкой отображается ссылка, которую откроет QR код в данный момент. Пока пользователь не ввел ссылку, работает дефолтная ссылка https://renident.ru/ .
Страницу можно развернуть локально. Необходимо прислать код.
